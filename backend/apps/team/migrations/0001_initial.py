# Generated by Django 5.2.6 on 2025-09-06 15:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TeamDepartment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the department", max_length=100, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the department"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for the department",
                        max_length=7,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Department",
                "verbose_name_plural": "Team Departments",
                "db_table": "team_department",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TeamMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="First name of the team member", max_length=50
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="Last name of the team member", max_length=50
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address of the team member",
                        max_length=254,
                        unique=True,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number of the team member",
                        max_length=17,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        choices=[
                            ("ceo", "Chief Executive Officer"),
                            ("cto", "Chief Technology Officer"),
                            ("cfo", "Chief Financial Officer"),
                            ("manager", "Manager"),
                            ("senior_developer", "Senior Developer"),
                            ("developer", "Developer"),
                            ("junior_developer", "Junior Developer"),
                            ("designer", "Designer"),
                            ("marketing", "Marketing Specialist"),
                            ("sales", "Sales Representative"),
                            ("hr", "Human Resources"),
                            ("support", "Customer Support"),
                            ("other", "Other"),
                        ],
                        help_text="Position/role of the team member",
                        max_length=50,
                    ),
                ),
                (
                    "custom_position",
                    models.CharField(
                        blank=True,
                        help_text="Custom position title if 'Other' is selected",
                        max_length=100,
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Biography or description of the team member",
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        help_text="Profile image of the team member",
                        null=True,
                        upload_to="team/profiles/",
                    ),
                ),
                (
                    "hire_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the team member was hired",
                        null=True,
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Salary of the team member (confidential)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the team member is currently active",
                    ),
                ),
                (
                    "linkedin_url",
                    models.URLField(blank=True, help_text="LinkedIn profile URL"),
                ),
                (
                    "twitter_url",
                    models.URLField(blank=True, help_text="Twitter profile URL"),
                ),
                (
                    "github_url",
                    models.URLField(blank=True, help_text="GitHub profile URL"),
                ),
                (
                    "website_url",
                    models.URLField(blank=True, help_text="Personal website URL"),
                ),
                (
                    "display_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in which to display this team member",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this team member should be featured",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        help_text="Department the team member belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="members",
                        to="team.teamdepartment",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True,
                        help_text="Linked user account (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="team_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Member",
                "verbose_name_plural": "Team Members",
                "db_table": "team_member",
                "ordering": ["display_order", "first_name", "last_name"],
            },
        ),
        migrations.CreateModel(
            name="TeamAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the achievement", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of the achievement"),
                ),
                (
                    "date_achieved",
                    models.DateField(
                        help_text="Date when the achievement was accomplished"
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Image related to the achievement",
                        null=True,
                        upload_to="team/achievements/",
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this achievement should be featured",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "team_members",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Team members involved in this achievement",
                        related_name="achievements",
                        to="team.teammember",
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Achievement",
                "verbose_name_plural": "Team Achievements",
                "db_table": "team_achievement",
                "ordering": ["-date_achieved"],
            },
        ),
        migrations.AddIndex(
            model_name="teamdepartment",
            index=models.Index(fields=["name"], name="team_depart_name_63b394_idx"),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["first_name", "last_name"],
                name="team_member_first_n_bdeafb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(fields=["email"], name="team_member_email_293afb_idx"),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["position"], name="team_member_positio_3e309b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["department"], name="team_member_departm_67f47c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["is_active"], name="team_member_is_acti_2f320d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["is_featured"], name="team_member_is_feat_d74b17_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teammember",
            index=models.Index(
                fields=["display_order"], name="team_member_display_65196f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teamachievement",
            index=models.Index(fields=["title"], name="team_achiev_title_83c133_idx"),
        ),
        migrations.AddIndex(
            model_name="teamachievement",
            index=models.Index(
                fields=["date_achieved"], name="team_achiev_date_ac_9784a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="teamachievement",
            index=models.Index(
                fields=["is_featured"], name="team_achiev_is_feat_7b1bd4_idx"
            ),
        ),
    ]
