# Generated by Django 5.2.6 on 2025-09-06 15:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("properties", "0003_property_deleted_at_property_deleted_by_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AppointmentType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        default=60, help_text="Default duration in minutes"
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#3B82F6",
                        help_text="Hex color code for calendar display",
                        max_length=7,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "requires_property",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this appointment type requires a property",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_appointment_types",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_appointment_types",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Appointment Type",
                "verbose_name_plural": "Appointment Types",
                "db_table": "appointment_types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Appointment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("scheduled_date", models.DateField()),
                ("scheduled_time", models.TimeField()),
                ("duration_minutes", models.PositiveIntegerField(default=60)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                            ("rescheduled", "Rescheduled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("client_phone", models.CharField(blank=True, max_length=20)),
                ("client_email", models.EmailField(blank=True, max_length=254)),
                (
                    "meeting_location",
                    models.TextField(
                        blank=True,
                        help_text="Custom meeting location if not at property",
                    ),
                ),
                (
                    "meeting_link",
                    models.URLField(
                        blank=True, help_text="Video call link for virtual appointments"
                    ),
                ),
                (
                    "agent_notes",
                    models.TextField(blank=True, help_text="Private notes for agent"),
                ),
                (
                    "client_notes",
                    models.TextField(blank=True, help_text="Notes from client"),
                ),
                (
                    "completion_notes",
                    models.TextField(
                        blank=True, help_text="Notes after appointment completion"
                    ),
                ),
                ("reminder_sent", models.BooleanField(default=False)),
                ("reminder_sent_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True)),
                ("reschedule_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "agent",
                    models.ForeignKey(
                        limit_choices_to={"is_staff": True},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="agent_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cancelled_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cancelled_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "original_appointment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rescheduled_appointments",
                        to="appointments.appointment",
                    ),
                ),
                (
                    "property_ref",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="appointments",
                        to="properties.property",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_appointments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "appointment_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="appointments",
                        to="appointments.appointmenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Appointment",
                "verbose_name_plural": "Appointments",
                "db_table": "appointments",
                "ordering": ["-scheduled_date", "-scheduled_time"],
            },
        ),
        migrations.CreateModel(
            name="AppointmentReminder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "reminder_type",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("sms", "SMS"),
                            ("push", "Push Notification"),
                            ("in_app", "In-App Notification"),
                        ],
                        max_length=10,
                    ),
                ),
                ("scheduled_for", models.DateTimeField()),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("is_sent", models.BooleanField(default=False)),
                ("subject", models.CharField(blank=True, max_length=200)),
                ("message", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "appointment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reminders",
                        to="appointments.appointment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Appointment Reminder",
                "verbose_name_plural": "Appointment Reminders",
                "db_table": "appointment_reminders",
                "ordering": ["scheduled_for"],
                "indexes": [
                    models.Index(
                        fields=["scheduled_for", "is_sent"],
                        name="appointment_schedul_9a25d5_idx",
                    ),
                    models.Index(
                        fields=["appointment"], name="appointment_appoint_0135cb_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="appointment",
            index=models.Index(
                fields=["scheduled_date", "scheduled_time"],
                name="appointment_schedul_bbb64e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="appointment",
            index=models.Index(fields=["status"], name="appointment_status_9fecd6_idx"),
        ),
        migrations.AddIndex(
            model_name="appointment",
            index=models.Index(
                fields=["client"], name="appointment_client__2834cc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="appointment",
            index=models.Index(fields=["agent"], name="appointment_agent_i_0071c5_idx"),
        ),
        migrations.AddIndex(
            model_name="appointment",
            index=models.Index(
                fields=["property_ref"], name="appointment_propert_ef67c0_idx"
            ),
        ),
    ]
