# Generated by Django 5.2.6 on 2025-09-06 15:51

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Country",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full country name",
                        max_length=100,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="ISO country code (e.g., US, UK, KE)",
                        max_length=3,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Country code must be 2-3 uppercase letters",
                                regex="^[A-Z]{2,3}$",
                            )
                        ],
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the country name",
                        max_length=120,
                        unique=True,
                    ),
                ),
                (
                    "continent",
                    models.CharField(
                        choices=[
                            ("africa", "Africa"),
                            ("asia", "Asia"),
                            ("europe", "Europe"),
                            ("north_america", "North America"),
                            ("south_america", "South America"),
                            ("oceania", "Oceania"),
                            ("antarctica", "Antarctica"),
                        ],
                        help_text="Continent where the country is located",
                        max_length=50,
                    ),
                ),
                (
                    "currency_code",
                    models.CharField(
                        help_text="ISO currency code (e.g., USD, EUR, KES)",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency code must be 3 uppercase letters",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                (
                    "currency_symbol",
                    models.CharField(
                        blank=True,
                        help_text="Currency symbol (e.g., $, â‚¬, KSh)",
                        max_length=5,
                    ),
                ),
                (
                    "phone_code",
                    models.CharField(
                        help_text="International phone code (e.g., +1, +254)",
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Phone code must start with + followed by 1-4 digits",
                                regex="^\\+\\d{1,4}$",
                            )
                        ],
                    ),
                ),
                (
                    "flag_emoji",
                    models.CharField(
                        blank=True,
                        help_text="Flag emoji for the country",
                        max_length=10,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this country is active for property listings",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_countries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_countries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="State",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full state/province name",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        blank=True,
                        help_text="State/province code (e.g., CA, NY, NAI)",
                        max_length=10,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the state name",
                        max_length=120,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("state", "State"),
                            ("province", "Province"),
                            ("region", "Region"),
                            ("territory", "Territory"),
                            ("district", "District"),
                            ("county", "County"),
                        ],
                        default="state",
                        help_text="Type of administrative division",
                        max_length=20,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this state is active for property listings",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "country",
                    models.ForeignKey(
                        help_text="Country this state belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="states",
                        to="cities.country",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_states",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_states",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "State/Province",
                "verbose_name_plural": "States/Provinces",
                "ordering": ["country__name", "name"],
            },
        ),
        migrations.CreateModel(
            name="City",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full city name",
                        max_length=100,
                        validators=[django.core.validators.MinLengthValidator(2)],
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="URL-friendly version of the city name",
                        max_length=120,
                        unique=True,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Longitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "population",
                    models.PositiveIntegerField(
                        blank=True, help_text="City population", null=True
                    ),
                ),
                (
                    "area_km2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="City area in square kilometers",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        blank=True,
                        help_text="Timezone (e.g., America/New_York, Africa/Nairobi)",
                        max_length=50,
                    ),
                ),
                (
                    "postal_codes",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of postal/zip codes for this city",
                    ),
                ),
                (
                    "is_capital",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this city is a capital (state/country)",
                    ),
                ),
                (
                    "is_major",
                    models.BooleanField(
                        default=False, help_text="Whether this is a major city"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this city is active for property listings",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of the city for SEO and marketing",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="City image for display",
                        null=True,
                        upload_to="cities/images/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_cities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="updated_cities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "state",
                    models.ForeignKey(
                        help_text="State/province this city belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cities",
                        to="cities.state",
                    ),
                ),
            ],
            options={
                "verbose_name": "City",
                "verbose_name_plural": "Cities",
                "ordering": ["state__country__name", "state__name", "name"],
            },
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(fields=["name"], name="cities_coun_name_ae546d_idx"),
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(fields=["code"], name="cities_coun_code_302743_idx"),
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(
                fields=["continent"], name="cities_coun_contine_2b88f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="country",
            index=models.Index(
                fields=["is_active"], name="cities_coun_is_acti_a335ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="state",
            index=models.Index(fields=["name"], name="cities_stat_name_82543c_idx"),
        ),
        migrations.AddIndex(
            model_name="state",
            index=models.Index(
                fields=["country", "name"], name="cities_stat_country_f99473_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="state",
            index=models.Index(
                fields=["is_active"], name="cities_stat_is_acti_132f14_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="state",
            unique_together={("country", "name")},
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(fields=["name"], name="cities_city_name_a4d1d7_idx"),
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(
                fields=["state", "name"], name="cities_city_state_i_eb624f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(
                fields=["is_major"], name="cities_city_is_majo_ca64b2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(
                fields=["is_capital"], name="cities_city_is_capi_fb0865_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(
                fields=["is_active"], name="cities_city_is_acti_e787bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="city",
            index=models.Index(
                fields=["latitude", "longitude"], name="cities_city_latitud_3b65e7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="city",
            unique_together={("state", "name")},
        ),
    ]
