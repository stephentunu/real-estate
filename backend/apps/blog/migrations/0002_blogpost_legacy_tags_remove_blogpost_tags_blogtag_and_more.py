# Generated by Django 5.2.6 on 2025-09-22 03:43

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("blog", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="blogpost",
            name="legacy_tags",
            field=models.CharField(
                blank=True,
                help_text="Legacy comma-separated tags (for migration purposes)",
                max_length=500,
            ),
        ),
        migrations.RemoveField(
            model_name="blogpost",
            name="tags",
        ),
        migrations.CreateModel(
            name="BlogTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the tag", max_length=50, unique=True
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the tag name", unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the tag"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6c757d",
                        help_text="Hex color code for the tag",
                        max_length=7,
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Whether this tag is featured"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Blog Tag",
                "verbose_name_plural": "Blog Tags",
                "db_table": "blog_tag",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="blogpost",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                help_text="Tags associated with this post",
                related_name="blog_posts",
                to="blog.blogtag",
            ),
        ),
        migrations.AddIndex(
            model_name="blogtag",
            index=models.Index(fields=["name"], name="blog_tag_name_43b6ed_idx"),
        ),
        migrations.AddIndex(
            model_name="blogtag",
            index=models.Index(fields=["slug"], name="blog_tag_slug_915fc6_idx"),
        ),
        migrations.AddIndex(
            model_name="blogtag",
            index=models.Index(
                fields=["is_featured"], name="blog_tag_is_feat_fa96b1_idx"
            ),
        ),
    ]
