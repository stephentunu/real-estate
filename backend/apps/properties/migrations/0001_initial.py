# Generated by Django 5.2.6 on 2025-09-03 21:55

import django.core.validators
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Property title/name", max_length=200),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed property description"),
                ),
                (
                    "listing_type",
                    models.CharField(
                        choices=[
                            ("sale", "For Sale"),
                            ("rent", "For Rent"),
                            ("both", "Sale or Rent"),
                        ],
                        default="sale",
                        help_text="Whether property is for sale, rent, or both",
                        max_length=10,
                    ),
                ),
                (
                    "address_line_1",
                    models.CharField(help_text="Primary address line", max_length=255),
                ),
                (
                    "address_line_2",
                    models.CharField(
                        blank=True, help_text="Secondary address line", max_length=255
                    ),
                ),
                ("city", models.CharField(help_text="City name", max_length=100)),
                (
                    "state",
                    models.CharField(help_text="State or province", max_length=100),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True, help_text="Postal or ZIP code", max_length=20
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="Kenya", help_text="Country name", max_length=100
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Latitude coordinate",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=8,
                        help_text="Longitude coordinate",
                        max_digits=11,
                        null=True,
                    ),
                ),
                (
                    "bedrooms",
                    models.PositiveIntegerField(
                        help_text="Number of bedrooms",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(50),
                        ],
                    ),
                ),
                (
                    "bathrooms",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Number of bathrooms (can be decimal for half baths)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.5")),
                            django.core.validators.MaxValueValidator(Decimal("50.0")),
                        ],
                    ),
                ),
                (
                    "square_feet",
                    models.PositiveIntegerField(
                        blank=True, help_text="Property size in square feet", null=True
                    ),
                ),
                (
                    "lot_size",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Lot size in acres",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "year_built",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Year the property was built",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1800),
                            django.core.validators.MaxValueValidator(2030),
                        ],
                    ),
                ),
                (
                    "sale_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sale price (if for sale)",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "rent_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Monthly rent price (if for rent)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="KES",
                        help_text="Currency code (e.g., KES, USD)",
                        max_length=3,
                    ),
                ),
                (
                    "parking_spaces",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of parking spaces"
                    ),
                ),
                (
                    "has_garage",
                    models.BooleanField(
                        default=False, help_text="Whether property has a garage"
                    ),
                ),
                (
                    "has_pool",
                    models.BooleanField(
                        default=False, help_text="Whether property has a pool"
                    ),
                ),
                (
                    "has_garden",
                    models.BooleanField(
                        default=False, help_text="Whether property has a garden"
                    ),
                ),
                (
                    "is_furnished",
                    models.BooleanField(
                        default=False, help_text="Whether property is furnished"
                    ),
                ),
                (
                    "is_featured",
                    models.BooleanField(
                        default=False, help_text="Whether this is a featured listing"
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(
                        default=True, help_text="Whether the listing is published"
                    ),
                ),
                (
                    "views_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of times this property has been viewed",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the property was first published",
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Property",
                "verbose_name_plural": "Properties",
                "db_table": "properties",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PropertyFeature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Feature name (e.g., Fireplace, Balcony, Security System)",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Feature description"),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon class or name for UI display",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this feature is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Property Feature",
                "verbose_name_plural": "Property Features",
                "db_table": "property_features",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PropertyFeatureAssignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        blank=True,
                        help_text="Optional value for the feature (e.g., '2' for 'Fireplaces')",
                        max_length=200,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Property Feature Assignment",
                "verbose_name_plural": "Property Feature Assignments",
                "db_table": "property_feature_assignments",
            },
        ),
        migrations.CreateModel(
            name="PropertyImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        help_text="Property image", upload_to="properties/"
                    ),
                ),
                (
                    "caption",
                    models.CharField(
                        blank=True,
                        help_text="Image caption or description",
                        max_length=200,
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the primary/featured image",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Display order of the image"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Property Image",
                "verbose_name_plural": "Property Images",
                "db_table": "property_images",
                "ordering": ["order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="PropertyStatus",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Status name (e.g., Available, Sold, Rented)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Description of the status"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this status is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Property Status",
                "verbose_name_plural": "Property Statuses",
                "db_table": "property_statuses",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PropertyType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Property type name (e.g., House, Apartment, Commercial)",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the property type"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this property type is active"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Property Type",
                "verbose_name_plural": "Property Types",
                "db_table": "property_types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SavedProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="User's private notes about this property"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Saved Property",
                "verbose_name_plural": "Saved Properties",
                "db_table": "saved_properties",
                "ordering": ["-created_at"],
            },
        ),
    ]
