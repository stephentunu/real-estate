# Generated by Django 5.2.6 on 2025-09-22 03:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("properties", "0003_property_deleted_at_property_deleted_by_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Amenity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the amenity", max_length=100, unique=True
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of the amenity"
                    ),
                ),
                (
                    "icon",
                    models.CharField(
                        blank=True,
                        help_text="Icon class or name for UI display",
                        max_length=50,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True,
                        help_text="Category of amenity (e.g., 'Recreation', 'Security', 'Utilities')",
                        max_length=50,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this amenity is active and available for selection",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Amenity",
                "verbose_name_plural": "Amenities",
                "db_table": "property_amenities",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PropertyAmenity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "amenity",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="property_amenities",
                        to="properties.amenity",
                    ),
                ),
                (
                    "property",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="property_amenities",
                        to="properties.property",
                    ),
                ),
            ],
            options={
                "verbose_name": "Property Amenity",
                "verbose_name_plural": "Property Amenities",
                "db_table": "property_amenity_relations",
                "ordering": ["amenity__name"],
            },
        ),
        migrations.AddIndex(
            model_name="amenity",
            index=models.Index(fields=["name"], name="property_am_name_d5ff4a_idx"),
        ),
        migrations.AddIndex(
            model_name="amenity",
            index=models.Index(
                fields=["category"], name="property_am_categor_21371c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="amenity",
            index=models.Index(
                fields=["is_active"], name="property_am_is_acti_780998_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="propertyamenity",
            index=models.Index(
                fields=["property"], name="property_am_propert_4f33e8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="propertyamenity",
            index=models.Index(
                fields=["amenity"], name="property_am_amenity_9dbbd3_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="propertyamenity",
            unique_together={("property", "amenity")},
        ),
    ]
