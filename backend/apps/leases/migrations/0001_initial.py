# Generated by Django 5.2.6 on 2025-09-05 18:15

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("properties", "0003_property_deleted_at_property_deleted_by_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Lease",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether notifications are enabled for this record",
                    ),
                ),
                (
                    "notification_channels",
                    models.TextField(
                        blank=True,
                        default='["in_app"]',
                        help_text="JSON array of enabled notification channels",
                    ),
                ),
                (
                    "lease_number",
                    models.CharField(
                        help_text="Unique lease identifier", max_length=50, unique=True
                    ),
                ),
                (
                    "lease_type",
                    models.CharField(
                        choices=[
                            ("residential", "Residential"),
                            ("commercial", "Commercial"),
                            ("industrial", "Industrial"),
                            ("retail", "Retail"),
                            ("office", "Office"),
                        ],
                        default="residential",
                        help_text="Type of lease",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("active", "Active"),
                            ("expired", "Expired"),
                            ("terminated", "Terminated"),
                            ("renewed", "Renewed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        help_text="Current lease status",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField(help_text="Lease start date")),
                ("end_date", models.DateField(help_text="Lease end date")),
                (
                    "notice_period_days",
                    models.PositiveIntegerField(
                        default=30,
                        help_text="Notice period required for termination (in days)",
                    ),
                ),
                (
                    "monthly_rent",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Monthly rent amount",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "security_deposit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Security deposit amount",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="KES",
                        help_text="Currency code (e.g., KES, USD)",
                        max_length=3,
                    ),
                ),
                (
                    "terms_and_conditions",
                    models.TextField(
                        blank=True, help_text="Additional terms and conditions"
                    ),
                ),
                (
                    "special_clauses",
                    models.TextField(
                        blank=True, help_text="Special clauses or agreements"
                    ),
                ),
                (
                    "auto_renewal",
                    models.BooleanField(
                        default=False, help_text="Whether lease auto-renews"
                    ),
                ),
                (
                    "renewal_notice_days",
                    models.PositiveIntegerField(
                        default=60,
                        help_text="Days before expiry to give renewal notice",
                    ),
                ),
                (
                    "lease_document",
                    models.FileField(
                        blank=True,
                        help_text="Signed lease agreement document",
                        null=True,
                        upload_to="leases/documents/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "signed_at",
                    models.DateTimeField(
                        blank=True, help_text="When the lease was signed", null=True
                    ),
                ),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        help_text="Managing agent (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_leases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "landlord",
                    models.ForeignKey(
                        help_text="Landlord user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="landlord_leases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "property_ref",
                    models.ForeignKey(
                        help_text="Property being leased",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leases",
                        to="properties.property",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant user",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenant_leases",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lease",
                "verbose_name_plural": "Leases",
                "db_table": "leases",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LeaseTerms",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "max_occupants",
                    models.PositiveIntegerField(
                        default=2, help_text="Maximum number of occupants allowed"
                    ),
                ),
                (
                    "pets_allowed",
                    models.BooleanField(
                        default=False, help_text="Whether pets are allowed"
                    ),
                ),
                (
                    "pet_deposit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Additional deposit for pets",
                        max_digits=10,
                    ),
                ),
                (
                    "tenant_maintenance_responsibilities",
                    models.TextField(
                        blank=True,
                        help_text="What maintenance tenant is responsible for",
                    ),
                ),
                (
                    "landlord_maintenance_responsibilities",
                    models.TextField(
                        blank=True,
                        help_text="What maintenance landlord is responsible for",
                    ),
                ),
                (
                    "utilities_included",
                    models.JSONField(
                        default=list, help_text="List of utilities included in rent"
                    ),
                ),
                (
                    "utilities_tenant_pays",
                    models.JSONField(
                        default=list,
                        help_text="List of utilities tenant must pay separately",
                    ),
                ),
                (
                    "smoking_allowed",
                    models.BooleanField(
                        default=False, help_text="Whether smoking is allowed"
                    ),
                ),
                (
                    "subletting_allowed",
                    models.BooleanField(
                        default=False, help_text="Whether subletting is allowed"
                    ),
                ),
                (
                    "commercial_use_allowed",
                    models.BooleanField(
                        default=False, help_text="Whether commercial use is allowed"
                    ),
                ),
                (
                    "parking_spaces_included",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of parking spaces included"
                    ),
                ),
                (
                    "storage_included",
                    models.BooleanField(
                        default=False, help_text="Whether storage space is included"
                    ),
                ),
                (
                    "late_fee_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Late payment fee amount",
                        max_digits=10,
                    ),
                ),
                (
                    "late_fee_grace_days",
                    models.PositiveIntegerField(
                        default=5, help_text="Grace period before late fees apply"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lease",
                    models.OneToOneField(
                        help_text="Associated lease",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="terms",
                        to="leases.lease",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lease Terms",
                "verbose_name_plural": "Lease Terms",
                "db_table": "lease_terms",
            },
        ),
        migrations.CreateModel(
            name="PaymentSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether notifications are enabled for this record",
                    ),
                ),
                (
                    "notification_channels",
                    models.TextField(
                        blank=True,
                        default='["in_app"]',
                        help_text="JSON array of enabled notification channels",
                    ),
                ),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("rent", "Monthly Rent"),
                            ("deposit", "Security Deposit"),
                            ("late_fee", "Late Fee"),
                            ("utility", "Utility Payment"),
                            ("maintenance", "Maintenance Fee"),
                            ("other", "Other"),
                        ],
                        default="rent",
                        help_text="Type of payment",
                        max_length=20,
                    ),
                ),
                (
                    "amount_due",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount due for this payment",
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "amount_paid",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Amount actually paid",
                        max_digits=12,
                    ),
                ),
                ("due_date", models.DateField(help_text="Payment due date")),
                (
                    "paid_date",
                    models.DateField(
                        blank=True, help_text="Date payment was made", null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("paid", "Paid"),
                            ("overdue", "Overdue"),
                            ("partial", "Partially Paid"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        help_text="Payment status",
                        max_length=20,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        help_text="Payment method used (e.g., Bank Transfer, M-Pesa)",
                        max_length=50,
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        blank=True,
                        help_text="Payment reference or transaction ID",
                        max_length=100,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this payment"
                    ),
                ),
                (
                    "receipt",
                    models.FileField(
                        blank=True,
                        help_text="Payment receipt or proof",
                        null=True,
                        upload_to="leases/receipts/",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lease",
                    models.ForeignKey(
                        help_text="Associated lease",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment_schedules",
                        to="leases.lease",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment Schedule",
                "verbose_name_plural": "Payment Schedules",
                "db_table": "payment_schedules",
                "ordering": ["due_date"],
            },
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(
                fields=["lease_number"], name="leases_lease_n_ea7c18_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(fields=["status"], name="leases_status_3db7e6_idx"),
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(
                fields=["start_date", "end_date"], name="leases_start_d_825b01_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(fields=["tenant"], name="leases_tenant__c311df_idx"),
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(fields=["landlord"], name="leases_landlor_95a07c_idx"),
        ),
        migrations.AddIndex(
            model_name="lease",
            index=models.Index(
                fields=["property_ref"], name="leases_propert_0af0ad_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentschedule",
            index=models.Index(
                fields=["due_date"], name="payment_sch_due_dat_71e7fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentschedule",
            index=models.Index(fields=["status"], name="payment_sch_status_8f4549_idx"),
        ),
        migrations.AddIndex(
            model_name="paymentschedule",
            index=models.Index(
                fields=["payment_type"], name="payment_sch_payment_6b5564_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentschedule",
            index=models.Index(fields=["lease"], name="payment_sch_lease_i_6a16dc_idx"),
        ),
    ]
