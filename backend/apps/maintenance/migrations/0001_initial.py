# Generated by Django 5.2.6 on 2025-09-05 18:19

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("properties", "0003_property_deleted_at_property_deleted_by_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Contractor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "company_name",
                    models.CharField(
                        help_text="Company or business name", max_length=200
                    ),
                ),
                (
                    "license_number",
                    models.CharField(
                        blank=True,
                        help_text="Professional license number",
                        max_length=100,
                    ),
                ),
                (
                    "business_phone",
                    models.CharField(help_text="Business phone number", max_length=20),
                ),
                (
                    "business_email",
                    models.EmailField(
                        help_text="Business email address", max_length=254
                    ),
                ),
                ("website", models.URLField(blank=True, help_text="Company website")),
                ("address", models.TextField(help_text="Business address")),
                ("city", models.CharField(max_length=100)),
                ("state", models.CharField(max_length=100)),
                ("postal_code", models.CharField(max_length=20)),
                (
                    "specializations",
                    models.JSONField(
                        default=list,
                        help_text="List of maintenance categories contractor specializes in",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("suspended", "Suspended"),
                            ("pending_approval", "Pending Approval"),
                        ],
                        default="pending_approval",
                        help_text="Current contractor status",
                        max_length=20,
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Average rating (0-5)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("5.00")),
                        ],
                    ),
                ),
                (
                    "total_jobs",
                    models.PositiveIntegerField(
                        default=0, help_text="Total number of completed jobs"
                    ),
                ),
                (
                    "available_days",
                    models.JSONField(
                        default=list,
                        help_text="Days of the week contractor is available",
                    ),
                ),
                (
                    "available_hours_start",
                    models.TimeField(
                        blank=True, help_text="Start of available hours", null=True
                    ),
                ),
                (
                    "available_hours_end",
                    models.TimeField(
                        blank=True, help_text="End of available hours", null=True
                    ),
                ),
                (
                    "insurance_valid_until",
                    models.DateField(
                        blank=True, help_text="Insurance expiration date", null=True
                    ),
                ),
                (
                    "certifications",
                    models.JSONField(
                        default=list, help_text="List of professional certifications"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True, help_text="When contractor was approved", null=True
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="Associated user account",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contractor_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Contractor",
                "verbose_name_plural": "Contractors",
                "db_table": "contractors",
                "ordering": ["-rating", "company_name"],
            },
        ),
        migrations.CreateModel(
            name="MaintenanceRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "search_vector",
                    models.TextField(
                        blank=True,
                        help_text="Computed search vector for full-text search",
                    ),
                ),
                (
                    "search_metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional search metadata and configuration",
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether notifications are enabled for this record",
                    ),
                ),
                (
                    "notification_channels",
                    models.TextField(
                        blank=True,
                        default='["in_app"]',
                        help_text="JSON array of enabled notification channels",
                    ),
                ),
                (
                    "request_number",
                    models.CharField(
                        help_text="Unique maintenance request identifier",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title of the maintenance issue", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the maintenance issue"
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("plumbing", "Plumbing"),
                            ("electrical", "Electrical"),
                            ("hvac", "HVAC"),
                            ("appliances", "Appliances"),
                            ("carpentry", "Carpentry"),
                            ("painting", "Painting"),
                            ("flooring", "Flooring"),
                            ("roofing", "Roofing"),
                            ("security", "Security"),
                            ("cleaning", "Cleaning"),
                            ("landscaping", "Landscaping"),
                            ("other", "Other"),
                        ],
                        help_text="Category of maintenance required",
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                            ("emergency", "Emergency"),
                        ],
                        default="medium",
                        help_text="Priority level of the request",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("submitted", "Submitted"),
                            ("acknowledged", "Acknowledged"),
                            ("assigned", "Assigned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("on_hold", "On Hold"),
                        ],
                        default="submitted",
                        help_text="Current status of the request",
                        max_length=20,
                    ),
                ),
                (
                    "location_details",
                    models.TextField(
                        blank=True, help_text="Specific location within the property"
                    ),
                ),
                (
                    "access_instructions",
                    models.TextField(
                        blank=True, help_text="Instructions for accessing the property"
                    ),
                ),
                (
                    "tenant_available",
                    models.BooleanField(
                        default=True,
                        help_text="Whether tenant will be available for access",
                    ),
                ),
                (
                    "preferred_date",
                    models.DateField(
                        blank=True,
                        help_text="Tenant's preferred date for maintenance",
                        null=True,
                    ),
                ),
                (
                    "preferred_time",
                    models.TimeField(
                        blank=True,
                        help_text="Tenant's preferred time for maintenance",
                        null=True,
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateField(
                        blank=True,
                        help_text="Scheduled date for maintenance",
                        null=True,
                    ),
                ),
                (
                    "scheduled_time",
                    models.TimeField(
                        blank=True,
                        help_text="Scheduled time for maintenance",
                        null=True,
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost of maintenance",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost of maintenance",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "images",
                    models.JSONField(
                        default=list, help_text="List of image URLs showing the issue"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "acknowledged_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the request was acknowledged",
                        null=True,
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the maintenance was completed",
                        null=True,
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "landlord",
                    models.ForeignKey(
                        help_text="Landlord responsible for the property",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_maintenance_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "property_ref",
                    models.ForeignKey(
                        help_text="Property requiring maintenance",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="maintenance_requests",
                        to="properties.property",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant who submitted the request",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submitted_maintenance_requests",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Maintenance Request",
                "verbose_name_plural": "Maintenance Requests",
                "db_table": "maintenance_requests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WorkOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "visibility_level",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("REGISTERED", "Registered Users"),
                            ("AGENCY_ONLY", "Agency Only"),
                            ("LANDLORD_ONLY", "Landlord Only"),
                            ("TENANT_ONLY", "Tenant Only"),
                            ("CLASSIFIED", "Classified"),
                            ("SYSTEM", "System Only"),
                        ],
                        db_index=True,
                        default="REGISTERED",
                        help_text="Visibility level for this record",
                        max_length=20,
                    ),
                ),
                (
                    "visibility_groups",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of group names with access (e.g., ['landlords', 'agents'])",
                    ),
                ),
                (
                    "visibility_users",
                    models.TextField(
                        blank=True,
                        default="[]",
                        help_text="JSON array of specific user IDs with access",
                    ),
                ),
                (
                    "visibility_exceptions",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Complex visibility rules as JSON (e.g., {'tenant': 'LEASE.active'})",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this record has been soft deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, help_text="When this record was deleted", null=True
                    ),
                ),
                (
                    "retention_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this record will be permanently deleted",
                        null=True,
                    ),
                ),
                (
                    "notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Whether notifications are enabled for this record",
                    ),
                ),
                (
                    "notification_channels",
                    models.TextField(
                        blank=True,
                        default='["in_app"]',
                        help_text="JSON array of enabled notification channels",
                    ),
                ),
                (
                    "work_order_number",
                    models.CharField(
                        help_text="Unique work order identifier",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Work order title", max_length=200),
                ),
                (
                    "description",
                    models.TextField(help_text="Detailed work description"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("created", "Created"),
                            ("assigned", "Assigned"),
                            ("accepted", "Accepted"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("rejected", "Rejected"),
                        ],
                        default="created",
                        help_text="Current work order status",
                        max_length=20,
                    ),
                ),
                (
                    "scheduled_date",
                    models.DateField(
                        blank=True, help_text="Scheduled work date", null=True
                    ),
                ),
                (
                    "scheduled_time",
                    models.TimeField(
                        blank=True, help_text="Scheduled work time", null=True
                    ),
                ),
                (
                    "estimated_duration",
                    models.DurationField(
                        blank=True, help_text="Estimated work duration", null=True
                    ),
                ),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Estimated cost",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "actual_cost",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Actual cost",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "materials_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cost of materials",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "labor_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Cost of labor",
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00"))
                        ],
                    ),
                ),
                (
                    "work_performed",
                    models.TextField(
                        blank=True, help_text="Description of work performed"
                    ),
                ),
                (
                    "materials_used",
                    models.JSONField(default=list, help_text="List of materials used"),
                ),
                (
                    "before_images",
                    models.JSONField(default=list, help_text="Before work images"),
                ),
                (
                    "after_images",
                    models.JSONField(default=list, help_text="After work images"),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Rating given by tenant/landlord (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True, help_text="Feedback from tenant/landlord"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assigned_at",
                    models.DateTimeField(
                        blank=True, help_text="When work order was assigned", null=True
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, help_text="When work started", null=True
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, help_text="When work was completed", null=True
                    ),
                ),
                (
                    "contractor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned contractor",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="work_orders",
                        to="maintenance.contractor",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who deleted this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted_records",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "maintenance_request",
                    models.ForeignKey(
                        help_text="Associated maintenance request",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="work_orders",
                        to="maintenance.maintenancerequest",
                    ),
                ),
            ],
            options={
                "verbose_name": "Work Order",
                "verbose_name_plural": "Work Orders",
                "db_table": "work_orders",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="contractor",
            index=models.Index(fields=["status"], name="contractors_status_80bc23_idx"),
        ),
        migrations.AddIndex(
            model_name="contractor",
            index=models.Index(fields=["rating"], name="contractors_rating_927629_idx"),
        ),
        migrations.AddIndex(
            model_name="contractor",
            index=models.Index(fields=["city"], name="contractors_city_6b41fb_idx"),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["request_number"], name="maintenance_request_fc5548_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(fields=["status"], name="maintenance_status_b8d89d_idx"),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["priority"], name="maintenance_priorit_7af9c2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["category"], name="maintenance_categor_1e2358_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["tenant"], name="maintenance_tenant__dde1e0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["landlord"], name="maintenance_landlor_4e9ae4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["property_ref"], name="maintenance_propert_b599e4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="maintenancerequest",
            index=models.Index(
                fields=["scheduled_date"], name="maintenance_schedul_6ecca6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workorder",
            index=models.Index(
                fields=["work_order_number"], name="work_orders_work_or_0e9ded_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workorder",
            index=models.Index(fields=["status"], name="work_orders_status_3f6c76_idx"),
        ),
        migrations.AddIndex(
            model_name="workorder",
            index=models.Index(
                fields=["contractor"], name="work_orders_contrac_1b03a6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workorder",
            index=models.Index(
                fields=["maintenance_request"], name="work_orders_mainten_db7ac8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="workorder",
            index=models.Index(
                fields=["scheduled_date"], name="work_orders_schedul_a0bdce_idx"
            ),
        ),
    ]
