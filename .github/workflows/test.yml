name: Automated Testing

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.13'

jobs:
  # Unit Tests - Frontend
  frontend-unit:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
      
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:unit -- --coverage --watchAll=false
      
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        flags: frontend-unit
        name: frontend-unit-${{ matrix.node-version }}

  # Unit Tests - Backend
  backend-unit:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        django-version: ['4.2', '5.0', '5.1']
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jaston_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:8.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run unit tests
      run: |
        cd backend
        pytest tests/unit/ --cov=. --cov-report=xml --cov-report=html -v
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend-unit
        name: backend-unit-py${{ matrix.python-version }}-django${{ matrix.django-version }}

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jaston_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:8.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
      
    - name: Setup test database
      run: |
        cd backend
        python manage.py migrate
        python manage.py loaddata fixtures/test_data.json
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Run integration tests
      run: |
        cd backend
        pytest tests/integration/ --cov=. --cov-report=xml -v
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: integration
        name: integration-tests

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jaston_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:8.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
      
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
      
    - name: Build frontend
      run: |
        cd frontend
        npm run build
      
    - name: Setup test database
      run: |
        cd backend
        python manage.py migrate
        python manage.py loaddata fixtures/test_data.json
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Start backend server
      run: |
        cd backend
        python manage.py runserver 8000 &
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Start frontend server
      run: |
        cd frontend
        npm run preview -- --port 3000 &
        sleep 5
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
      env:
        BASE_URL: http://localhost:3000
        API_BASE_URL: http://localhost:8000
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: jaston_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:8.0
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Setup test database
      run: |
        cd backend
        python manage.py migrate
        python manage.py loaddata fixtures/performance_data.json
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Start backend server
      run: |
        cd backend
        python manage.py runserver 8000 &
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/jaston_test
        REDIS_URL: redis://localhost:6379/0
        
    - name: Run performance tests
      run: |
        cd backend
        locust -f tests/performance/locustfile.py --headless -u 50 -r 10 -t 60s --host http://localhost:8000
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: backend/performance-results/
        retention-days: 30

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-unit, backend-unit, integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit | ${{ needs.frontend-unit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit | ${{ needs.backend-unit.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY